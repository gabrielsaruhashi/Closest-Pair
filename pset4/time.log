ESTIMATE of time to complete assignment: 13 hours

      Time     Time
Date  Started  Spent Work completed
----  -------  ----  --------------
9/30  5:30pm   1:30	read the assignment, read the PDF notes to learn how to work with FILE, implemented three functions
                
9/01  10:30am  2:00	finished implementing the initial version of functions in cplist.c

9/02  2:15pm   0:45 figured out how to set up the makefile

9/02  7:00pm.  1:00 debugged some of the function in plist.c

9/04  9:30pm   1:30 fixed implementation of plist_get

9/05  8:30am   2:00 fixed errors in closest pair related to trying to access elements in the opaque structure

9/05  8:00pm   3:00 worked on the implementation of closest_pair's search_middle  

9/06  2:00pm.  1:30 fixed some bugs of read_points    

9/08  9:00am   2:00 all functions, but make middle and search middle are working 
9/10  10:30pm  0:30 fixed one last bug with code, I was not saving the points correctly
09/12 3:30pm   0:30 writing descriptive comments explaining functions
               ----
               16:15  TOTAL time spent

I discussed my solution with: Sarim Abbas.


Understanding the file structure was very challenging at first. As Doctor Glenn gave us the entire main function and the prototypes for the function, I spent the initial two hours reading through the entire documentation and going line by line to understand what each part was doing. Moreover, as I was not that comfortable with the concept of opaque lists, it was difficult for me to implement the functions at closest.pair.c. I ended up implementing all the functions the wrong way, trying to access the structure plist directly instead of using the methods Dr. Glenn gave us.
Moreover, one the most challenging parts of the problem set was definitely understanding how to keep the algorithm at O(n). The logic for search middle was very intricate at first because I had not fully visualized what was going on in the code.
The other major problem was that I forgot to update the points after my recursive calls to left and right returned with the initial smallest distance. That led to some weird behavior in my ouputs that made me lose a couple of hours trying to figure out what was wrong.